#include<bits/stdc++.h>
using namespace std;

void printArr(vector<int> &nums){
  for (int i=0;i<nums.size();i++){
    cout<<nums[i]<<" ";
  }
  cout<<endl;
}

//partition function to find the index of pivot element using for loop.
int partitionUsingFor(vector<int> &nums,int start,int end){
  int pivotElement = nums[end];
  //consider that pivotElement idx is start only.
  int pivotIdx=start;

  for(int itr=start;itr<end;itr++){
    //if we find an element smaller then pivot
    //then we need to take it to the left.
    if(nums[itr] <=pivotElement){
      swap(nums[itr],nums[pivotIdx]);
      pivotIdx++;
    }
  }
  //finally swap the pivot to its correct position and return idx.
  swap(nums[end],nums[pivotIdx]);
  return pivotIdx;
}

//partition function to find the index of pivot element using while loop.
int partitionUsingWhile(vector<int> &nums,int start,int end){
  int pivotElement = nums[end];
  //take two pointer one for left element of pivot
  //one for the right side element.
  int leftPtr=start,rightPtr=end-1;

  while(leftPtr<=rightPtr){
    //this loop will run till the elements are smaller then pivot.
    while(nums[leftPtr]<=pivotElement && leftPtr<=rightPtr){
      leftPtr++;
    }

    //this loop will run till the elements are greater then pivot.
    while(nums[rightPtr]>pivotElement && leftPtr<=rightPtr){
      rightPtr--;
    }

    //swap only is condition is not broken:
    if(leftPtr<rightPtr){
      swap(nums[leftPtr],nums[rightPtr]);
    }
  }
  // finally swap pivot element with leftPtr element
  // as this is the correct position for pivot.
  swap(nums[leftPtr],nums[end]);
  return leftPtr;
}

void quickSortHelper(vector<int> &nums,int start,int end){
  if(start>=end){
    return;
  }

  // int pivotIdx = partitionUsingWhile(nums,start,end);
  int pivotIdx = partitionUsingFor(nums,start,end);
  //run for only element smaller and larger then pivot 
  //as pivot is already sorted.
  quickSortHelper(nums,start,pivotIdx-1);
  quickSortHelper(nums,pivotIdx+1,end);
}

void quickSort(vector<int> &nums){
  return quickSortHelper(nums,0,nums.size()-1);
}

int main(){
  vector<int> nums = {6,2,5,3,8,9,1};

  printArr(nums);
  quickSort(nums);
  printArr(nums);

  return 0;
}
