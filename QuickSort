#include<iostream>
using namespace std;

//Partioning function that put pivot at its correct index and return the index.
int partition(int arr[],int beg,int end){
    //We are picking pivot on our own, that is the first element present in the array.
    int pivotEle = arr[beg];
    //Take two pointer p1 and p2 they are used to swap internal elements.
    int p1=beg;
    int p2=end;

    //This loop work untill all smaller elements comes to left to pivot index
    //And all the greater come to right to pivot index respectively.
    while(p1<p2){
        //This internal loop work untill we found an element greater then pivot.
        while(arr[p1]<=pivotEle)
            p1++;

        //This internal loop work untill we found an element lesser then pivot.
        while(arr[p2]>pivotEle)
            p2--;

        //The internal swapping is only possible if p1 is less then p2.
        if(p1<p2)
            swap(arr[p1],arr[p2]);

    }
    //Finally we swap the pivot element with p2 as when above loop terminate
    //The p2 pointer is before p1 and that is the correct position to put the pivot.
    swap(arr[beg],arr[p2]);

    //Finally return pivot element index.
    return p2;
}

//Recursive function used for sorting array on divide and conquer basis.
void quickSort(int arr[],int beg,int end){
    // See if their is only one or no element in our array
    // Then it is a base condition and we return from here only.
    if(beg>=end)
        return;

    //Otherwise we pick pivot (either in beg or end or median whatever)
    //Then put it in its correct position.
    int pivotIdx = partition(arr,beg,end);

    //Finally we call the same function on the array left to pivot and right to pivot recursively.
    quickSort(arr,beg,pivotIdx-1);
    quickSort(arr,pivotIdx+1,end);
}

int main(){
    int n;
    cin>>n;

    int arr[n];

    for(int i=0;i<n;i++)
        cin>>arr[i];

    quickSort(arr,0,n-1);

    for(int i=0;i<n;i++)
        cout<<arr[i]<<" ";

}
