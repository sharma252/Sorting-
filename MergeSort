#include<bits/stdc++.h>
using namespace std;

// Function to print the elements of the array
void printArr(vector<int> &nums){
  for (int i = 0; i < nums.size(); i++){
    cout << nums[i] << " ";
  }
  cout << endl;
}

// Function to merge two sorted subarrays into a single sorted array
void mergeArr(vector<int> &nums, int start, int mid, int end){
  // Calculate the sizes of the two temporary arrays
  int leftIdx = mid - start + 1;
  int rightIdx = end - mid;

  // Create temporary arrays to hold the elements of the subarrays
  int leftArr[leftIdx];
  int rightArr[rightIdx];

  // Copy data to the temporary arrays
  for(int itr = 0; itr < leftIdx; itr++){
    leftArr[itr] = nums[start + itr];
  }

  for(int itr = 0; itr < rightIdx; itr++){
    rightArr[itr] = nums[mid + itr + 1];
  }

  // Merge the temporary arrays back into the original array
  int leftPtr = 0, rightPtr = 0;
  int itr = start;

  // Merge the two subarrays while maintaining order
  while(leftPtr < leftIdx && rightPtr < rightIdx){
    if(leftArr[leftPtr] <= rightArr[rightPtr]){
      nums[itr] = leftArr[leftPtr];
      leftPtr++;
    } else {
      nums[itr] = rightArr[rightPtr];
      rightPtr++;
    }
    itr++;
  }

  // Copy any remaining elements from the left temporary array
  while(leftPtr < leftIdx){
    nums[itr] = leftArr[leftPtr];
    leftPtr++;
    itr++;
  }

  // Copy any remaining elements from the right temporary array
  while(rightPtr < rightIdx){
    nums[itr] = rightArr[rightPtr];
    rightPtr++;
    itr++;
  }
}

// Helper function to perform merge sort
void mergeSortHelper(vector<int> &nums, int start, int end){
  // Base case: if the array has one or no elements, it's already sorted
  if(start >= end){
    return;
  }

  // Find the middle point of the array
  int mid = start + (end - start) / 2;

  // Recursively sort the first and second halves
  mergeSortHelper(nums, start, mid);
  mergeSortHelper(nums, mid + 1, end);

  // Merge the sorted halves
  mergeArr(nums, start, mid, end);
}

// Function to initiate the merge sort process
void mergeSort(vector<int> &nums){
  mergeSortHelper(nums, 0, nums.size() - 1);
}

int main(){
    vector<int> nums = {6, 2, 5, 3, 8, 9, 1};

    // Print the array before sorting
    printArr(nums);

    // Perform merge sort
    mergeSort(nums);

    // Print the array after sorting
    printArr(nums);

    return 0;
}
